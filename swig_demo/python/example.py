# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_example')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_example')
    _example = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_example', [dirname(__file__)])
        except ImportError:
            import _example
            return _example
        if fp is not None:
            try:
                _mod = imp.load_module('_example', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _example = swig_import_helper()
    del swig_import_helper
else:
    import _example
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class MeasurementInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeasurementInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeasurementInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["system"] = _example.MeasurementInfo_system_set
    __swig_getmethods__["system"] = _example.MeasurementInfo_system_get
    if _newclass:
        system = _swig_property(_example.MeasurementInfo_system_get, _example.MeasurementInfo_system_set)
    __swig_setmethods__["sat_id"] = _example.MeasurementInfo_sat_id_set
    __swig_getmethods__["sat_id"] = _example.MeasurementInfo_sat_id_get
    if _newclass:
        sat_id = _swig_property(_example.MeasurementInfo_sat_id_get, _example.MeasurementInfo_sat_id_set)
    __swig_setmethods__["in_week_ms"] = _example.MeasurementInfo_in_week_ms_set
    __swig_getmethods__["in_week_ms"] = _example.MeasurementInfo_in_week_ms_get
    if _newclass:
        in_week_ms = _swig_property(_example.MeasurementInfo_in_week_ms_get, _example.MeasurementInfo_in_week_ms_set)
    __swig_setmethods__["transmit_time_ms"] = _example.MeasurementInfo_transmit_time_ms_set
    __swig_getmethods__["transmit_time_ms"] = _example.MeasurementInfo_transmit_time_ms_get
    if _newclass:
        transmit_time_ms = _swig_property(_example.MeasurementInfo_transmit_time_ms_get, _example.MeasurementInfo_transmit_time_ms_set)
    __swig_setmethods__["transmit_time"] = _example.MeasurementInfo_transmit_time_set
    __swig_getmethods__["transmit_time"] = _example.MeasurementInfo_transmit_time_get
    if _newclass:
        transmit_time = _swig_property(_example.MeasurementInfo_transmit_time_get, _example.MeasurementInfo_transmit_time_set)
    __swig_setmethods__["doppler"] = _example.MeasurementInfo_doppler_set
    __swig_getmethods__["doppler"] = _example.MeasurementInfo_doppler_get
    if _newclass:
        doppler = _swig_property(_example.MeasurementInfo_doppler_get, _example.MeasurementInfo_doppler_set)
    __swig_setmethods__["elevation"] = _example.MeasurementInfo_elevation_set
    __swig_getmethods__["elevation"] = _example.MeasurementInfo_elevation_get
    if _newclass:
        elevation = _swig_property(_example.MeasurementInfo_elevation_get, _example.MeasurementInfo_elevation_set)

    def __init__(self):
        this = _example.new_MeasurementInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _example.delete_MeasurementInfo
    __del__ = lambda self: None
MeasurementInfo_swigregister = _example.MeasurementInfo_swigregister
MeasurementInfo_swigregister(MeasurementInfo)

class PredictMeasurementsOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PredictMeasurementsOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PredictMeasurementsOutput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["measurement_infos"] = _example.PredictMeasurementsOutput_measurement_infos_set
    __swig_getmethods__["measurement_infos"] = _example.PredictMeasurementsOutput_measurement_infos_get
    if _newclass:
        measurement_infos = _swig_property(_example.PredictMeasurementsOutput_measurement_infos_get, _example.PredictMeasurementsOutput_measurement_infos_set)
    __swig_setmethods__["measurement_infos_count"] = _example.PredictMeasurementsOutput_measurement_infos_count_set
    __swig_getmethods__["measurement_infos_count"] = _example.PredictMeasurementsOutput_measurement_infos_count_get
    if _newclass:
        measurement_infos_count = _swig_property(_example.PredictMeasurementsOutput_measurement_infos_count_get, _example.PredictMeasurementsOutput_measurement_infos_count_set)
    __swig_setmethods__["prompt"] = _example.PredictMeasurementsOutput_prompt_set
    __swig_getmethods__["prompt"] = _example.PredictMeasurementsOutput_prompt_get
    if _newclass:
        prompt = _swig_property(_example.PredictMeasurementsOutput_prompt_get, _example.PredictMeasurementsOutput_prompt_set)

    def __init__(self):
        this = _example.new_PredictMeasurementsOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _example.delete_PredictMeasurementsOutput
    __del__ = lambda self: None
PredictMeasurementsOutput_swigregister = _example.PredictMeasurementsOutput_swigregister
PredictMeasurementsOutput_swigregister(PredictMeasurementsOutput)


def PredictMeasurements(input, input_count, output):
    return _example.PredictMeasurements(input, input_count, output)
PredictMeasurements = _example.PredictMeasurements
class MeasurementInfoArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeasurementInfoArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeasurementInfoArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _example.new_MeasurementInfoArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _example.delete_MeasurementInfoArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _example.MeasurementInfoArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _example.MeasurementInfoArray___setitem__(self, index, value)

    def cast(self):
        return _example.MeasurementInfoArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_example.MeasurementInfoArray_frompointer)
    else:
        frompointer = _example.MeasurementInfoArray_frompointer
MeasurementInfoArray_swigregister = _example.MeasurementInfoArray_swigregister
MeasurementInfoArray_swigregister(MeasurementInfoArray)

def MeasurementInfoArray_frompointer(t):
    return _example.MeasurementInfoArray_frompointer(t)
MeasurementInfoArray_frompointer = _example.MeasurementInfoArray_frompointer

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _example.new_intArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _example.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _example.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _example.intArray___setitem__(self, index, value)

    def cast(self):
        return _example.intArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_example.intArray_frompointer)
    else:
        frompointer = _example.intArray_frompointer
intArray_swigregister = _example.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _example.intArray_frompointer(t)
intArray_frompointer = _example.intArray_frompointer

# This file is compatible with both classic and new-style classes.


